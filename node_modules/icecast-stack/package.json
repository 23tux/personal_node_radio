{
  "name": "icecast-stack",
  "description": "A `StreamStack` implementation for parsing and/or injecting metadata with SHOUTcast/Icecast radio streams.",
  "version": "0.3.0",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/node-icecast-stack.git"
  },
  "keywords": [
    "SHOUTcast",
    "Icecast",
    "Radio",
    "Internet",
    "Metadata",
    "ReadStream",
    "StreamStack"
  ],
  "dependencies": {
    "stream-stack": ">= 1.1.0",
    "http-stack": ">= 0.1.1"
  },
  "devDependencies": {
    "colors": ">= 0.3.0",
    "expresso": "0.8.x"
  },
  "main": "./icecast-stack.js",
  "scripts": {
    "test": "expresso test/test*.js"
  },
  "engines": {
    "node": ">= 0.3.0"
  },
  "readme": "node-icecast-stack\n==================\n### A [StreamStack][] implementation for parsing and/or injecting metadata with SHOUTcast/Icecast radio streams.\n\nThis module offers an interface for retrieving the raw audio data and\nparsing the metadata from a [SHOUTcast][] or [Icecast][] broadcast. Two API's\nare offered: a low-level [StreamStack][] read and write interface (which\nrequires you to establish the connection to the `net.Stream` yourself), and a\nmore convenient high-level\n[ReadStream](http://nodejs.org/docs/latest/api/streams.html) interface (which\ncreates a `net.Stream` connection, and uses the `StreamStack` interfaces\ntransparently).\n\n\nUsage\n-----\n\nHere's a basic example of just piping the clean audio data to _stdout_,\nwhile printing the HTTP response headers and metadata events to _stderr_:\n\n``` javascript\nvar icecast = require('icecast-stack');\n\nvar url = 'http://67.205.85.183:5500'; // URL to a known Icecast stream\nvar stream = icecast.createReadStream(url);\n\n// Fired when the `net.Stream` has it's 'connect' event.\nstream.on('connect', function() {\n  console.error(\"Radio Stream connected!\");\n});\n    \n// Fired after the HTTP response headers have been received.\nstream.on('response', function(res) {\n  console.error(\"Radio Stream response!\");\n  console.error(res.headers);\n});\n\n// When a 'metadata' event happens, usually a new song is starting.\nstream.on('metadata', function(metadata) {\n  var title = icecast.parseMetadata(metadata).StreamTitle;\n  console.error(title);\n});\n\n// Proxy the raw audio stream to 'stdout', redirect to a file!\nstream.pipe(process.stdout);\n```\n\nLook in the `examples` directory for code of some more complex use-cases.\n\nThe most important use case of this is for HTML5 web apps that listen to\nradio streams; the `<audio>` tag doesn't know how to deal with the extra\nmetadata and it is impossible to extract (on the client-side). But a\nWebSocket connection could be used in conjunction with this module to provide\nthose `metadata` events to a web browser, for instance.\n\n\nInstallation\n------------\n\nInstallation through [__npm__](http://github.com/isaacs/npm) is the most\nstraight-forward way to install the `node-icecast-stack` module:\n\n``` bash\n$ npm install icecast-stack\n```\n\nOr just checking out this _git_ repo works as well:\n\n``` bash\n$ git clone git://github.com/TooTallNate/node-icecast-stack.git\n```\n\n\n[NodeJS]: http://nodejs.org\n[StreamStack]: http://github.com/TooTallNate/node-stream-stack\n[SHOUTcast]: http://www.shoutcast.com\n[Icecast]: http://icecast.org\n",
  "readmeFilename": "README.md",
  "_id": "icecast-stack@0.3.0",
  "_from": "icecast-stack@~0.3.0"
}
