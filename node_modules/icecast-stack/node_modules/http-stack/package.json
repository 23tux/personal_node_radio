{
  "name": "http-stack",
  "description": "A `StreamStack` implementation of the HTTP protocol.",
  "tags": [
    "http",
    "js",
    "stream",
    "stack",
    "stream-stack"
  ],
  "version": "0.1.3",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net"
  },
  "keywords": [
    "stream",
    "stack",
    "http",
    "protocol"
  ],
  "dependencies": {
    "stream-stack": ">= 1.1.1",
    "header-stack": ">= 0.1.1"
  },
  "main": "./index.js",
  "engines": {
    "node": ">= 0.3.0"
  },
  "directories": {
    "lib": "."
  },
  "files": [
    ""
  ],
  "scripts": {
    "start": "node server.js"
  },
  "readme": "node-http-stack\n===============\n### A [StreamStack][] implementation of the HTTP protocol for [Node][].\n\n\nThis module exposes two concrete `StreamStack` implementations:\n`HttpRequestStack` and `HttpResponseStack`. Together they can be used to write\nand/or respond to HTTP requests.\n\nThis is an alternative to the built-in core `http` module. It is designed\nto be more lenient, as well as being written with the `StreamStack` ideology.\n\n\nHTTP Request\n------------\n\nIn this typical example, we'll establish a `net.Stream` connection to\n_www.google.com_ on port 80 and send an HTTP request for `/`:\n\n    var conn = require('net').createConnection(80, 'www.google.com');\n    conn.on(\"connect\", function() {\n    \n      var req = new HttpRequestStack(conn);\n      \n      // 'response' gets emitted when the HTTP headers have been recieved\n      req.on(\"response\", function(res) {\n        console.error(res.headers);\n      });\n      \n      // The body of the response will be piped to 'stdout'\n      req.pipe(process.stdout);\n\n      // Initiate a GET request for '/' with no request body\n      req.get(\"/\", [\n        \"Host: www.google.com\"\n      ]);\n      req.end();\n      \n    });\n\nInstead, in this example, we'll `write()` a request to __stdout__. Don't\nexpect there to be any response, but it's useful to see what's being written:\n\n    var request = new HttpRequestStack(process.stdout);\n    \n    // Write an HTTP post request to stdout\n    var body = \"hello!\\n\";\n    request.post(\"/\", [\n      \"Content-Length: \" + body.length,\n      \"Content-Type: text/plain\",\n      \"Host: example.com\"\n    ]);\n    request.end(body);\n    \n    --> POST / HTTP/1.1\n    --> Content-Length: 7\n    --> Content-Type: text/plain\n    --> Host: example.com\n    -->\n    --> hello!\n\n\nHTTP Response\n-------------\n\nYou can use `HttpResponseStack`s to respond to HTTP requests from a `net.Server`:\n\n    require('net').createServer(function(stream) {\n\n      var res = new HttpResponseStack(stream);\n\n      // 'request' is emitted when HTTP headers from a request have been parsed\n      res.on(\"request\", function(request) {\n        res.writeHead(200, [\n          'Content-Type: text/plain'\n        ]);\n        res.end('Hello World\\n');        \n      });\n      \n    }).listen(8124, 'localhost');\n\n\nTODO\n----\n\n- Chunked encoding/decoding\n- Keep-Alive (needs chunked encoding)\n- Testing...\n\n[StreamStack]: http://github.com/TooTallNate/node-stream-stack\n[Node]: http://nodejs.org",
  "readmeFilename": "README.md",
  "_id": "http-stack@0.1.3",
  "_from": "http-stack@>= 0.1.1"
}
